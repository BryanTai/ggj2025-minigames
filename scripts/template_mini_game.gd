### README -bryan 
# This Template script is intended to be a starting guide for making your own MiniGame
# COPY/PASTE the code into your own MiniGame script and add your logic
## DO NOT EDIT THIS FILE

## MINIGAME STATES
# See BaseMiniGame.MiniGameState enum
## There are 4 states that a Mini Game can be in
#	1) PREPARING,	Game loads in, player has no control, instructions displayed
#	2) PLAYING, 		Player has control
#	3A) WIN, 		Player reaches the win condition
#	3B) LOSE, 		Either the player has reached a losing condition or has run out of time
## BaseMiniGame and MiniGameManager will automatically handle switching states

## STATE FUNCTIONS
# BaseMiniGame has functions for each state that are designed to be overridden
# These will trigger when the state changes, either at the Start or End
# "_on_start_XXX_state", "_on_end_XXX_state"
# Each state also has a _process function which will update each frame while that state is active
# "_process_XXX_state"

extends BaseMiniGame

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	super()
	instruction_text = "Replace me with instructions!"
	## Put any logic you'd like to happen at the beginning of your minigame here!

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	super(delta) # This line will process the State machine!
	## Use this _process function for things that don't care about the state
	
### STATE SPECIFIC FUNCTIONS
## These are intended to be overridden! 
## You probably won't need all of them so feel free to delete unused ones

## PREPARE STATE

# Called once when entering the PREPARING state (e.g. on _ready)
func _on_start_preparing_state() -> void:
	pass

# Called every frame while minigame is in the PREPARING state
func _process_preparing_state(delta: float) -> void:
	pass

# Called once when the PREPARING state ends
func _on_end_preparing_state() -> void:
	pass

## PLAYING STATE

# Called once when entering the PLAYING state (e.g. once the player gains control)
func _on_start_playing_state() -> void:
	pass

# Called every frame while minigame is in the PLAYING state
## Most of your game logic will go here!
func _process_playing_state(delta: float) -> void:
	
	## Use these 2 functions to trigger WIN or LOSE
	if(instruction_text == "Replace me with instructions!"):
		trigger_game_lose()
	else:
		trigger_game_win()

# Called once when the PLAYING state ends (e.g. Win or Lose)
func _on_end_playing_state() -> void:
	pass

## WIN STATE

# Called once when entering the WIN state
func _on_start_win_state() -> void:
	pass

# Called every frame while minigame is in the WIN state
func _process_win_state(delta: float) -> void:
	pass

## LOSE STATE

# Called once when entering the LOSE state
func _on_start_lose_state() -> void:
	pass

# Called every frame while minigame is in the LOSE state
func _process_lose_state(delta: float) -> void:
	pass
